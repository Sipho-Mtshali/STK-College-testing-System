rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Users collection
    match /users/{userId} {
      // Allow users to read their own document or if they're an admin
      allow read: if request.auth != null && 
                     (request.auth.uid == userId || 
                      get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
      
      // Allow users to create their own document during registration
      allow create: if request.auth != null && request.auth.uid == userId;
      
      // Allow users to update their own document or if they're an admin
      allow update: if request.auth != null && 
                       (request.auth.uid == userId || 
                        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
      
      // Only admins can delete
      allow delete: if request.auth != null && 
                       get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Students collection
    match /students/{studentId} {
      allow read: if request.auth != null && 
                     (request.auth.uid == studentId || 
                      get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['facilitator', 'admin']);
      
      allow create: if request.auth != null && request.auth.uid == studentId;
      
      allow update: if request.auth != null && 
                       (request.auth.uid == studentId || 
                        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['facilitator', 'admin']);
      
      allow delete: if request.auth != null && 
                       get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Facilitators collection
    match /facilitators/{facilitatorId} {
      allow read: if request.auth != null && 
                     (request.auth.uid == facilitatorId || 
                      get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
      
      allow create: if request.auth != null && request.auth.uid == facilitatorId;
      
      allow update: if request.auth != null && 
                       (request.auth.uid == facilitatorId || 
                        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
      
      allow delete: if request.auth != null && 
                       get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Modules collection
    match /modules/{moduleId} {
      allow read: if request.auth != null;
      
      allow create, update: if request.auth != null && 
                               get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['facilitator', 'admin'];
      
      allow delete: if request.auth != null && 
                       get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Tests collection
    match /tests/{testId} {
      allow read: if request.auth != null;
      
      allow create, update: if request.auth != null && 
                               get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['facilitator', 'admin'];
      
      allow delete: if request.auth != null && 
                       get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Grades collection
    match /grades/{gradeId} {
      allow read: if request.auth != null;
      
      allow create, update: if request.auth != null;
      
      allow delete: if request.auth != null && 
                       get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
  }
}